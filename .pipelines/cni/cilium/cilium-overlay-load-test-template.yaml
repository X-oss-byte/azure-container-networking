parameters:
  dependsOn: ""
  name: "cilium"
  clusterType: "overlay-no-kube-proxy-up"
  clusterName: "cilium-overlay"
  nodeCount: 10
  vmSize: "Standard_DS4_v2"


stages:

  # - stage: createAKScluster
  #   dependsOn: ${{ parameters.dependsOn }}
  #   displayName: "AKS Cluster with Cilium"
  #   jobs:
  #     - job: create_aks_cluster_with_${{ parameters.name }}
  #       steps:
  #         - template: ../load-test-templates/create-cluster-template.yaml
  #           parameters:
  #             clusterType: ${{ parameters.clusterType }}
  #             clusterName: ${{ parameters.clusterName }}
  #             nodeCount: ${{ parameters.nodeCount }}
  #             vmSize: ${{ parameters.vmSize }}
  # - stage: install_cilium
  #   dependsOn: createAKScluster
  #   displayName: "Install Cilium on AKS Overlay"
  #   jobs:
  #     - job: deploy_cilium_components
  #       steps:
  #         - task: AzureCLI@1
  #           displayName: "Install Cilium, CNS, and ip-masq-agent"
  #           inputs:
  #             azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
  #             scriptLocation: "inlineScript"
  #             scriptType: "bash"
  #             addSpnToEnvironment: true
  #             inlineScript: |
  #               set -ex
  #               az extension add --name aks-preview
  #               make -C ./hack/swift set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(make revision)
  #               ls -lah
  #               pwd
  #               kubectl cluster-info
  #               kubectl get po -owide -A
  #               echo "Deploy Azure-CNS"
  #               kubectl apply -f test/integration/manifests/cilium/cns-write-ovly.yaml
  #               echo "deploy Cilium ConfigMap"
  #               kubectl apply -f cilium/configmap.yaml
  #               kubectl apply -f test/integration/manifests/cilium/cilium-config.yaml
  #               echo "install Cilium onto Overlay Cluster"
  #               kubectl apply -f test/integration/manifests/cilium/cilium-agent
  #               kubectl apply -f test/integration/manifests/cilium/cilium-operator
  #               # Passes Cilium image to daemonset and deployment
  #               envsubst '${CILIUM_VERSION_TAG},${CILIUM_IMAGE_REGISTRY}' < test/integration/manifests/cilium/daemonset.yaml | kubectl apply -f -
  #               envsubst '${CILIUM_VERSION_TAG},${CILIUM_IMAGE_REGISTRY}' < test/integration/manifests/cilium/deployment.yaml | kubectl apply -f -
  #               kubectl get po -owide -A
  #               echo "deploy ip-masq-agent for overlay"
  #               kubectl create -f test/integration/manifests/ip-masq-agent/ip-masq-agent.yaml --validate=false
  #               cd test/integration/manifests/ip-masq-agent/
  #               kubectl create configmap config-custom.yaml
  #               kubectl create configmap config-reconcile.yaml
  #               cd ../../../..
  #               kubectl get po -owide -A
  - stage: pod_deployment
    # dependsOn: install_cilium
    displayName: "Pod Deployment"
    jobs:
      - job: deploy_pods
        steps:
          - template: ../load-test-templates/pod-deployment-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
  - stage: validate_state
    dependsOn: pod_deployment
    displayName: "Validate State"
    jobs:
      - job: validate_state
        steps:
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
  - stage: connectivity_tests_1
    dependsOn: validate_state
    displayName: "Connectivity Tests"
    jobs:
      - job: cni_tests_1
        steps:
          - script: |
              echo "install cilium CLI"
              CILIUM_CLI_VERSION=v0.13.2
              CLI_ARCH=amd64
              curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
              sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
              sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
              rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
            name: "InstallCiliumCli1"
            displayName: "Install Cilium CLI"
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -ex
                make -C ./hack/swift set-kubeconf AZCLI=az CLUSTER=$(CLUSTER)
            name: "GetCluster1"
            displayName: "Get AKS Cluster"
          - script: |
              kubectl delete ns load-test
              cilium connectivity test
            retryCountOnTaskFailure: 6
            name: "CiliumConnectivityTests1"
            displayName: "Run Cilium Connectivity Tests"

  - stage: restart_nodes
    dependsOn: connectivity_tests_1
    displayName: "Restart Node"
    jobs:
      - job: restart_nodes
        steps:
          - template: ../load-test-templates/restart-node-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
  - stage: validate_restart_state
    dependsOn: restart_nodes
    displayName: "Validate Restart State"
    jobs:
      - job: validate_restart_state
        steps:
          - template: ../load-test-templates/validate-state-template.yaml
            parameters:
              clusterName: ${{ parameters.clusterName }}
              restartCase: "true"
  - stage: connectivity_tests
    dependsOn: validate_restart_state
    displayName: "Connectivity Tests"
    jobs:
      - job: cni_tests
        steps:
          - script: |
              echo "install cilium CLI"
              CILIUM_CLI_VERSION=v0.13.2
              CLI_ARCH=amd64
              curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
              sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
              sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
              rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
            name: "InstallCiliumCli"
            displayName: "Install Cilium CLI"
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -ex
                make -C ./hack/swift set-kubeconf AZCLI=az CLUSTER=$(CLUSTER)
            name: "GetCluster"
            displayName: "Get AKS Cluster"
          - script: |
              kubectl delete ns load-test
              cilium connectivity test
            retryCountOnTaskFailure: 6
            name: "CiliumConnectivityTests"
            displayName: "Run Cilium Connectivity Tests"
  # - stage: delete
  #   displayName: "Delete Resources"
  #   dependsOn:
  #     - connectivity_tests
  #   jobs:
  #     - job: delete_resources
  #       steps:
  #         - task: AzureCLI@1
  #           inputs:
  #             azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
  #             scriptLocation: "inlineScript"
  #             scriptType: "bash"
  #             addSpnToEnvironment: true
  #             inlineScript: |
  #               set -ex
  #               if [ "$(DELETE_RESOURCES)" ]
  #               then
  #                 echo "Deleting Cluster and resource group"
  #                 make -C ./hack/swift set-kubeconf AZCLI=az CLUSTER=${{ parameters.clusterName }}-$(make revision)
  #                 make -C ./hack/swift azcfg AZCLI=az REGION=$(LOCATION)
  #                 make -C ./hack/swift down AZCLI=az REGION=$(LOCATION) SUB=$(SUBSCRIPTION_ID) CLUSTER=${{ parameters.clusterName }}-$(make revision)
  #                 echo "Cluster and resources down"
  #               else
  #                 echo "Deletion of resources is False"
  #               fi
  #           name: "CleanUpCluster"
  #           displayName: "Cleanup cluster"
  #   condition: always()
