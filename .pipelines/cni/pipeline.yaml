pr: none
trigger: none

stages:
  - stage: setup
    displayName: Setup
    jobs:
      - job: env
        displayName: Setup
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - script: |
              echo "Setting up environment"
              go version
              echo "##vso[task.setvariable variable=commitID;isOutput=true]$(make revision)"
              echo "##vso[task.setvariable variable=npmVersion;isOutput=true]$(make npm-version)"
              echo "##vso[task.setvariable variable=dropgzVersion;isOutput=true]$(make cni-dropgz-version)"
              echo "##vso[task.setvariable variable=cnsVersion;isOutput=true]$(make cns-version)"
            name: "SetEnvVars"
            displayName: "Set Environment Variables"
            condition: always()

  - stage: build_images
    dependsOn: setup
    displayName: "Build Images"
    jobs:
      - job: containerize_amd64
        displayName: Build Images
        pool:
          name: "$(BUILD_POOL_NAME_LINUX_AMD64)"
        strategy:
          matrix:
            cni_dropgz_test_linux_amd64:
              arch: amd64
              name: cni-dropgz-test
              os: linux
            cni_dropgz_test_windows2022_amd64:
              arch: amd64
              name: cni-dropgz-test
              os: windows
              os_version: ltsc2022
            cns_linux_amd64:
              arch: amd64
              name: cns
              os: linux
            npm_linux_amd64:
              arch: amd64
              name: npm
              os: linux
            npm_windows2022_amd64:
              arch: amd64
              name: npm
              os: windows
              os_version: ltsc2022
        steps:
          - template: ../containers/container-template.yaml
            parameters:
              arch: $(arch)
              name: $(name)
              os: $(os)
              os_version: $(os_version)

  - stage: binaries
    displayName: Build Binaries
    dependsOn: setup
    jobs:
      - job:
        displayName: "Build Kubernetes Test Suite Binary"
        pool:
          name: $(BUILD_POOL_NAME_DEFAULT)
        steps:
          - bash: |
              git clone https://github.com/huntergregory/kubernetes.git --depth=1 --branch=linux-sleep-before-probing
              cd kubernetes
              export PATH=$PATH:/usr/local/go/bin/
              make WHAT=test/e2e/e2e.test
            displayName: "Build Kubernetes e2e.test"
          - publish: $(System.DefaultWorkingDirectory)/kubernetes/_output/local/bin/linux/amd64
            artifact: npm_k8s

  - stage: publish
    displayName: Publish Multiarch Manifests
    dependsOn:
      - build_images
    jobs:
      - job: manifest
        displayName: Compile Manifests
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cni_dropgz_test:
              name: cni-dropgz-test
              platforms: linux/amd64 windows/amd64
            cns:
              name: cns
              platforms: linux/amd64
            npm:
              name: npm
              os_versions: ltsc2022
              platforms: linux/amd64 windows/amd64
        steps:
          - template: ../containers/manifest-template.yaml
            parameters:
              name: $(name)
              os_versions: $(os_versions)
              platforms: $(platforms)

  - template: cilium/cilium-overlay-load-test-template.yaml
    parameters:
      name: cilium_overlay
      clusterType: "overlay-no-kube-proxy-up"
      clusterName: "cilium-overlay"
      nodeCount: ${CILIUM_NODE_COUNT}
      vmSize: "Standard_DS4_v2"

  - template: singletenancy/windows-cni-load-test-template.yaml
    parameters:
      name: win_cniv1
      clusterType: "windows-cniv1-up"
      clusterName: "win-cniv1"
      nodeCount: ${WINDOWS_NODE_COUNT}
      vmSize: Standard_DS4_v2
      windowsVMSize: ${WINDOWS_VM_SKU}
      arch: amd64

  - template: singletenancy/linux-cniv2-template.yaml
    parameters:
      name: linux_podsubnet
      clusterType: swift-byocni-up
      clusterName: linux-cniv2-podsubnet
      nodeCount: ${LINUX_NODE_COUNT}
      vmSize: Standard_DS4_v2
      arch: amd64

  - template: singletenancy/linux-cniv2-template.yaml
    parameters:
      name: linux_overlay
      clusterType: overlay-byocni-up
      clusterName: linux-cniv2-overlay
      nodeCount: ${LINUX_NODE_COUNT}
      vmSize: Standard_DS4_v2
      arch: amd64

  - stage: delete_resources
    displayName: "Delete Resources"
    pool:
      name: "$(BUILD_POOL_NAME_DEFAULT)"
    dependsOn:
      - cilium_overlay
      - win_cniv1
      - linux_podsubnet
      - linux_overlay
      - setup
    variables:
      commitID: $[ stagedependencies.setup.env.outputs['SetEnvVars.commitID'] ]
    jobs:
      - job: delete
        displayName: Delete Cluster
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            cilium_overlay:
              name: cilium_overlay
              clusterName: cilium-overlay
            win_cniv1:
              name: win_cniv1
              clusterName: win-cniv1
            linux_podsubnet:
              name: linux_podsubnet
              clusterName: linux-cniv2-podsubnet
            linux_overlay:
              name: linux_overlay
              clusterName: linux-cniv2-overlay
        steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(TEST_SUB_SERVICE_CONNECTION)
              scriptLocation: "inlineScript"
              scriptType: "bash"
              addSpnToEnvironment: true
              inlineScript: |
                set -x
                if [ "$(DELETE_RESOURCES)" ]
                then
                  echo "Deleting Cluster and resource group"
                  make -C ./hack/aks set-kubeconf AZCLI=az CLUSTER=$(clusterName)-$(commitID)
                  make -C ./hack/aks azcfg AZCLI=az REGION=$(LOCATION)
                  make -C ./hack/aks down AZCLI=az REGION=$(LOCATION) SUB=$(SUBSCRIPTION_ID) CLUSTER=$(clusterName)-$(commitID)
                  echo "Cluster and resources down"
                else
                  echo "Deletion of resources is False"
                fi
            name: "CleanUpCluster"
            displayName: "Cleanup cluster - $(name)"
    condition: always()
